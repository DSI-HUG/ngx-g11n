# @hug/ngx-g11n

Provide tools to internationalize an angular application

## Setup

### Install dependencies

```bash
yarn ng add @angular/localize
yarn add @hug/ngx-g11n
```

### Configure angular.json for g11n

Add the following section to the angular.json in order to define g11n configuration and files path

#### Into project

```json
"g11n": {
"sourceLocale": "fr-CH",
"locales": {
        "de-CH": {
            "translation": "src/assets/g11n/translations.de-CH.arb"
        }
    }
},
```

#### Into architect

```json
"extract-i18n": {
    "builder": "@angular-devkit/build-angular:extract-i18n",
    "options": {
        "browserTarget": "ngx-g11n-demo:build", // Remove for angular >= 18
        "outputPath": "src/assets/translations/",
        "format": "arb",
        "outFile": "translations.arb"
    }
},
```

### Application module (Standalone application, see below)

Import G11nModule and declare it in the imports section

```typescript
import { G11nModule } from '@hug/ngx-g11n/core/g11n.module';

@NgModule({
  imports: [
    G11nModule.forRoot()
  ]
})
```

### Standalone application

Import providers from the G11nModule (app.config.ts) :

```typescript
export const appConfig: ApplicationConfig = {
    providers: [
        ...
        importProvidersFrom(G11nModule.forRoot())
    ]
};
```

If using http, in order to inject g11n interceptor, inject DI-based interceptors :

```typescript
export const appConfig: ApplicationConfig = {
    providers: [
        ...
        provideHttpClient(
            withInterceptorsFromDi()
        ),
        ...
    ]
};
```

### LocalStorage configuration
Additionnal setup to use localStorage to store user language.
This setup can be used in context where you can't use the queryParams to select language.

Be careful : If the queryParams LANGUAGE is present, it will still override localStorage value.

```typescript
import { G11nModule } from '@hug/ngx-g11n/core/g11n.module';

@NgModule({
  imports: [
    G11nModule.forRoot({
        useLocalStorage: true
    })
  ]
})
```

## Usage

### HTML

Content internationalization

```html
<span i18n="@@demoText">Texte à traduire</span>
```

Attributes internationalization
```html
<span subtitle="Texte à traduire" i18n-subtitle="@@demoText">...</span>
```

Plural management example with ICU
```html
<span i18n="@@demoPluralText">{items.length, plural, =0 {Aucun item} =1 {1 item} other {{{items.length}} items}}</span>
```

### Typescript

```ts
const textToTranslate = $localize`:@@demoText:Texte à traduire`;
```

### Build translation.arb

```bash
ng extract-i18n
```
